import os
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from flask import Flask, request

TOKEN = os.getenv("BOT_TOKEN")
OWNER_CHAT_ID = os.getenv("OWNER_CHAT_ID")

bot = telegram.Bot(token=TOKEN)
app = Flask(__name__)

def start(update, context):
    keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—ä—ë–º–∫—É", callback_data='book')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é?', reply_markup=reply_markup)

def button(update, context):
    query = update.callback_query
    query.answer()
    if query.data == 'book':
        context.user_data['step'] = 'name'
        query.edit_message_text(text="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

def handle_message(update, context):
    step = context.user_data.get('step')
    text = update.message.text

    if step == 'name':
        context.user_data['name'] = text
        context.user_data['step'] = 'date'
        update.message.reply_text("–ö–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—ä—ë–º–∫—É?")
    elif step == 'date':
        context.user_data['date'] = text
        context.user_data['step'] = 'details'
        update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—ä—ë–º–∫–µ (–ª–æ–∫–∞—Ü–∏—è, —Å—Ç–∏–ª—å –∏ —Ç.–¥.)")
    elif step == 'details':
        context.user_data['details'] = text
        name = context.user_data['name']
        date = context.user_data['date']
        details = context.user_data['details']

        message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ üì∏\n\n–ò–º—è: {name}\n–î–∞—Ç–∞ —Å—ä—ë–º–∫–∏: {date}\n–î–µ—Ç–∞–ª–∏: {details}"
        bot.send_message(chat_id=OWNER_CHAT_ID, text=message)
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—É –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π.")
        context.user_data.clear()
    else:
        update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        start(update, context)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()